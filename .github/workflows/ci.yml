name: CI

on:
  workflow_dispatch:  # Manual trigger via GitHub UI
  push:
  pull_request:
    branches: [ "master" ]
  schedule:
    - cron: "0 0 * * *"

env:
  CARGO_TERM_COLOR: always
  VULKAN_VERSION: 1.4.304.0
  RUST_LOG: debug
  RUST_BACKTRACE: full
  REPO_MSRV: 1.85
  MESA_VERSION: "24.3.4" # Note that this is only for windows
jobs:
  Build-Test-Windows:
    runs-on: windows-latest
    steps:
    - uses: actions/checkout@v4
    - name: Install rust toolchain
      run: rustup toolchain install ${{ env.REPO_MSRV }} --no-self-update --profile=minimal --component clippy && cargo -V

    - name: Install DXC(from wgpu CI)
      shell: bash
      run: |
        set -e
        curl.exe -L --retry 5 https://github.com/microsoft/DirectXShaderCompiler/releases/download/v1.8.2502/dxc_2025_02_20.zip -o dxc.zip
        7z.exe e dxc.zip -odxc bin/x64/{dxc.exe,dxcompiler.dll,dxil.dll}
        cygpath --windows "$PWD/dxc" >> "$GITHUB_PATH"
    - name: Install Mesa(partly taken from wgpu CI)
      shell: bash
      run: |
        curl.exe -L --retry 5 https://github.com/pal1000/mesa-dist-win/releases/download/$MESA_VERSION/mesa3d-$MESA_VERSION-release-msvc.7z -o mesa.7z
        7z.exe e mesa.7z -omesa x64/{opengl32.dll,libgallium_wgl.dll,libglapi.dll,vulkan_lvp.dll,lvp_icd.x86_64.json}

        mkdir -p target/debug/deps/
        cp -v mesa/* target/debug/
        cp -v mesa/* target/debug/deps/

        # We need to use cygpath to convert PWD to a windows path as we're using bash.
        echo "VK_DRIVER_FILES=`cygpath --windows $PWD/mesa/lvp_icd.x86_64.json`" >> "$GITHUB_ENV"
        echo "VK_ICD_FILENAMES=$(cygpath --windows "$PWD/mesa/lvp_icd.x86_64.json")" >> "$GITHUB_ENV"
        echo "GALLIUM_DRIVER=llvmpipe" >> "$GITHUB_ENV"
        echo "MESA_VK_DEVICE_SELECT=0" >> "$GITHUB_ENV"
        echo "MESA_LOADER_DRIVER_OVERRIDE=llvmpipe" >> "$GITHUB_ENV"
        echo "LIBGL_ALWAYS_SOFTWARE=true" >> "$GITHUB_ENV"
        # Put mesa at the start of the path
        echo "$(cygpath --windows "$PWD/mesa")" | cat - $GITHUB_PATH > temp && mv temp $GITHUB_PATH
        

    - name: Install Vulkan SDK
      shell: bash
      run: |
        set -e
        curl.exe -L --retry 5 https://sdk.lunarg.com/sdk/download/${{ env.VULKAN_VERSION }}/windows/VulkanSDK-${{ env.VULKAN_VERSION }}-Installer.exe -o vulkan-sdk-installer.exe
        ./vulkan-sdk-installer.exe --accept-licenses --default-answer --confirm-command install
        echo "C:/VulkanSDK/${{ env.VULKAN_VERSION }}/Bin" >> "$GITHUB_PATH"
        export VULKAN_SDK="C:/VulkanSDK/${{ env.VULKAN_VERSION }}/"
        echo "VULKAN_SDK=$VULKAN_SDK" >> $GITHUB_ENV
        echo "C:/VulkanSDK/${{ env.VULKAN_VERSION }}/Bin" >> "$GITHUB_PATH"
        echo "VK_LAYER_PATH=C:/VulkanSdk/${{ env.VULKAN_VERSION }}/etc/vulkan/explicit_layer.d" >> "$GITHUB_ENV"

    - name: Print vulkaninfo
      shell: bash
      run: |
        echo Running vulkaninfo
        "C:/VulkanSDK/${{ env.VULKAN_VERSION }}/Bin/vulkaninfoSDK.exe" || true
        
    - name: Build
      run: cargo build --verbose --all-targets --all-features
    - name: Clippy
      run: |
        set RUSTFLAGS="-Dwarnings"
        cargo clippy --verbose --all-targets --all-features
    - name: Run tests
      run: |
        cargo test --verbose --all-targets --all-features -- --nocapture
    - name: Clippy(no features)
      run: |
        set RUSTFLAGS="-Dwarnings"
        cargo clippy --verbose --all-targets --no-default-features
  Build-Test-Macos:
    runs-on: macos-latest
    steps:
    - uses: actions/checkout@v4
    - name: Install rust toolchain
      run: rustup toolchain install ${{ env.REPO_MSRV }} --no-self-update --profile=minimal --component clippy
    - name: Install vulkan sdk
      shell: bash
      run: |
        set -e
        curl -L --retry 5 https://sdk.lunarg.com/sdk/download/${{ env.VULKAN_VERSION }}/mac/vulkansdk-macos-${{ env.VULKAN_VERSION }}.zip -o vulkan-sdk.zip
        unzip vulkan-sdk.zip -d vulkan-sdk

        sudo ./vulkan-sdk/InstallVulkan.app/Contents/MacOS/InstallVulkan --root "$HOME/VulkanSDK" --accept-licenses --default-answer --confirm-command install
        ls -R $HOME/VulkanSdk
        echo "$HOME/VulkanSDK/macOS/bin" >> "$GITHUB_PATH"
        echo "VULKAN_SDK=$HOME/VulkanSdk/macOS" >> "$GITHUB_ENV"
    
    - name: Build
      shell: bash
      run: cargo build --verbose --all-targets --all-features
    - name: Clippy
      shell: bash
      run: RUSTFLAGS="-Dwarnings" cargo clippy --verbose --all-targets --all-features
    - name: Run tests
      shell: bash
      run: |
        cargo test --verbose --all-targets --all-features -- --nocapture
    - name: Clippy(no features)
      shell: bash
      run: RUSTFLAGS="-Dwarnings" cargo clippy --verbose --all-targets --no-default-features
  Build-Test-Linux:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4
    - name: Install rust toolchain
      run: rustup toolchain install ${{ env.REPO_MSRV }} --no-self-update --profile=minimal --component clippy
    - name: Download Vulkan SDK
      run: |
        export INSTALL_DIR=$GITHUB_WORKSPACE/vulkan-sdk
        mkdir -p $INSTALL_DIR
        curl -L -o vulkan-sdk.tar.xz "https://sdk.lunarg.com/sdk/download/$VULKAN_VERSION/linux/vulkan-sdk.tar.xz"
        tar -xf vulkan-sdk.tar.xz --strip-components=1 -C $INSTALL_DIR
        export VULKAN_SDK="$INSTALL_DIR/x86_64"
        export LD_LIBRARY_PATH="$VULKAN_SDK/lib:$LD_LIBRARY_PATH"
        echo "VULKAN_SDK=$VULKAN_SDK" >> $GITHUB_ENV
        echo "LD_LIBRARY_PATH=$LD_LIBRARY_PATH" >> $GITHUB_ENV # Make this a path to search for libraries
    - name: Install Vulkan loader & validation layers
      run: sudo apt-get update && sudo apt-get install -y libvulkan-dev vulkan-validationlayers
    - name: Install dxc and dxil libraries
      run: |
        export INSTALL_DIR=$GITHUB_WORKSPACE/dxc
        mkdir -p $INSTALL_DIR
        curl -L -o dxc.tar.gz "https://github.com/microsoft/DirectXShaderCompiler/releases/download/v1.8.2502/linux_dxc_2025_02_20.x86_64.tar.gz"
        tar -xzf dxc.tar.gz --strip-components=1 -C $INSTALL_DIR
        export LD_LIBRARY_PATH="$INSTALL_DIR/lib:$LD_LIBRARY_PATH"
        echo "LD_LIBRARY_PATH=$LD_LIBRARY_PATH" >> $GITHUB_ENV
    - name: Install Mesa Drivers
      run: sudo apt-get install -y mesa-vulkan-drivers mesa-utils
    - name: Ensure proper Vulkan & drivers installed
      run: |
        echo Listing vulkan icd.d files
        ls /usr/share/vulkan/icd.d
        echo Reading vulkan icd.d json files
        cat /usr/share/vulkan/icd.d/*.json
        echo Running vulkaninfo
        $VULKAN_SDK/bin/vulkaninfo || true
    - name: Build
      run: cargo build --verbose --all-targets --all-features
    - name: Clippy
      run: RUSTFLAGS="-Dwarnings" cargo clippy --verbose --all-targets --all-features
    - name: Run tests
      run: |
        cargo test --verbose --all-targets --all-features -- --nocapture
    - name: Clippy(no features)
      run: RUSTFLAGS="-Dwarnings" cargo clippy --verbose --all-targets --no-default-features
  Format:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Install Taplo(from wgpu CI)
        uses: uncenter/setup-taplo@v1
        with:
          version: "0.9.3"

      - name: Run `taplo fmt`(from wgpu CI)
        run: taplo format --check --diff

      - name: Run `cargo fmt`
        run: cargo fmt --check
