# BEGIN LICENSE
#   SupaSim, a GPGPU and simulation toolkit.
#   Copyright (C) 2025 SupaMaggie70 (Magnus Larsson)
#
#
#   SupaSim is free software; you can redistribute it and/or
#   modify it under the terms of the GNU General Public License
#   as published by the Free Software Foundation; either version 3
#   of the License, or (at your option) any later version.
#
#   SupaSim is distributed in the hope that it will be useful,
#   but WITHOUT ANY WARRANTY; without even the implied warranty of
#   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#   GNU General Public License for more details.
#
#   You should have received a copy of the GNU General Public License
#   along with this program.  If not, see <http://www.gnu.org/licenses/>.
# END LICENSE
name: CI

on:
  workflow_dispatch:  # Manual trigger via GitHub UI
  push:
  pull_request:
    branches: [ "master" ]
  schedule:
    - cron: "0 0 * * *"

env:
  CARGO_TERM_COLOR: always
  VULKAN_VERSION: 1.4.304.0
  RUST_LOG: debug
  RUST_BACKTRACE: full
  REPO_MSRV: 1.85
  MESA_VERSION: "24.3.4" # Note that this is only for windows
  WARP_VERSION: "1.0.13"
jobs:
  Format:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Install Taplo(from wgpu CI)
        uses: uncenter/setup-taplo@v1
        with:
          version: "0.9.3"

      - name: Run `taplo fmt`(from wgpu CI)
        run: taplo format --check --diff

      - name: Run `cargo fmt`
        run: cargo fmt --check

  Check-Dependencies:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Install nightly rust
        run: rustup install nightly --profile minimal
      - name: Install cargo-udeps
        run: cargo install cargo-udeps --locked
      - name: Run `cargo udeps`
        run: cargo +nightly udeps --all-targets --workspace
  
  build-check-test:
    strategy:
      fail-fast: false
      matrix:
        include:
          - name: Ubuntu
            os: ubuntu-latest
            run-tests: true
          - name: Windows
            os: windows-latest
            run-tests: true
          - name: MacOS
            os: macos-latest
            run-tests: true
    runs-on: ${{ matrix.os }}
    name: Check & Test (${{ matrix.name }})
    steps:
    - uses: actions/checkout@v4
    - name: Install rust toolchain
      shell: bash
      run: set -e && rustup toolchain install ${{ env.REPO_MSRV }} --no-self-update --profile=minimal --component clippy
      
    - name: Install Vulkan SDK, Mesa, Layers, DXC (Linux)
      shell: bash
      if: ${{ matrix.os == 'ubuntu-latest' }}
      run: |
        set -e

        # Mesa and layers
        sudo apt-get update
        sudo apt-get install -y mesa-vulkan-drivers mesa-utils libvulkan-dev vulkan-validationlayers
        
        # Vulkan SDK
        export INSTALL_DIR=$PWD/vulkan-sdk
        mkdir -p $INSTALL_DIR
        curl -L -o vulkan-sdk.tar.xz "https://sdk.lunarg.com/sdk/download/$VULKAN_VERSION/linux/vulkan-sdk.tar.xz"
        tar -xf vulkan-sdk.tar.xz --strip-components=1 -C $INSTALL_DIR
        export VULKAN_SDK="$INSTALL_DIR/x86_64"
        export LD_LIBRARY_PATH="$VULKAN_SDK/lib:$LD_LIBRARY_PATH"
        echo "VULKAN_SDK=$VULKAN_SDK" >> $GITHUB_ENV
        echo "LD_LIBRARY_PATH=$LD_LIBRARY_PATH" >> $GITHUB_ENV

        # DXC
        export INSTALL_DIR=$PWD/dxc
        mkdir -p $INSTALL_DIR
        curl -L -o dxc.tar.gz "https://github.com/microsoft/DirectXShaderCompiler/releases/download/v1.8.2502/linux_dxc_2025_02_20.x86_64.tar.gz"
        tar -xzf dxc.tar.gz --strip-components=1 -C $INSTALL_DIR
        export LD_LIBRARY_PATH="$INSTALL_DIR/lib:$LD_LIBRARY_PATH"
        echo "LD_LIBRARY_PATH=$LD_LIBRARY_PATH" >> $GITHUB_ENV
        
    - name: Install Vulkan SDK, Mesa, DXC, Warp (Windows)
      shell: bash
      if: ${{ matrix.os == 'windows-latest' }}
      run: |
        set -e

        # DXC
        curl.exe -L --retry 5 https://github.com/microsoft/DirectXShaderCompiler/releases/download/v1.8.2502/dxc_2025_02_20.zip -o dxc.zip
        7z.exe e dxc.zip -odxc bin/x64/{dxc.exe,dxcompiler.dll,dxil.dll}
        cygpath --windows "$PWD/dxc" >> "$GITHUB_PATH"

        # Warp
        curl.exe -L --retry 5 https://www.nuget.org/api/v2/package/Microsoft.Direct3D.WARP/$WARP_VERSION -o warp.zip
        7z.exe e warp.zip -owarp build/native/bin/x64/d3d10warp.dll
        mkdir -p target/debug/deps
        cp -v warp/d3d10warp.dll target/debug
        cp -v warp/d3d10warp.dll target/debug/deps
        echo "$GITHUB_WORKSPACE/warp" >> "$GITHUB_PATH"
        
        # Mesa
        curl.exe -L --retry 5 https://github.com/pal1000/mesa-dist-win/releases/download/$MESA_VERSION/mesa3d-$MESA_VERSION-release-msvc.7z -o mesa.7z
        7z.exe e mesa.7z -omesa x64/{opengl32.dll,libgallium_wgl.dll,libglapi.dll,vulkan_lvp.dll,lvp_icd.x86_64.json}
        echo "VK_DRIVER_FILES=`cygpath --windows $PWD/mesa/lvp_icd.x86_64.json`" >> "$GITHUB_ENV"
        echo "GALLIUM_DRIVER=llvmpipe" >> "$GITHUB_ENV"

        # Vulkan SDK
        curl.exe -L --retry 5 https://sdk.lunarg.com/sdk/download/${{ env.VULKAN_VERSION }}/windows/VulkanSDK-${{ env.VULKAN_VERSION }}-Installer.exe -o vulkan-sdk-installer.exe
        ./vulkan-sdk-installer.exe --accept-licenses --default-answer --confirm-command install
        echo "C:/VulkanSDK/${{ env.VULKAN_VERSION }}/Bin" >> "$GITHUB_PATH"
        echo "C:/VulkanSDK/${{ env.VULKAN_VERSION }}/Lib" >> "$GITHUB_PATH"
        export VULKAN_SDK="C:/VulkanSDK/${{ env.VULKAN_VERSION }}/"
        echo "VULKAN_SDK=$VULKAN_SDK" >> $GITHUB_ENV

    - name: Install Vulkan SDK (MacOS)
      shell: bash
      if: ${{ matrix.os == 'macos-latest' }}
      run: |
        set -e
        curl -L --retry 5 https://sdk.lunarg.com/sdk/download/${{ env.VULKAN_VERSION }}/mac/vulkansdk-macos-${{ env.VULKAN_VERSION }}.zip -o vulkan-sdk.zip
        unzip vulkan-sdk.zip -d vulkan-sdk

        sudo ./vulkan-sdk/InstallVulkan.app/Contents/MacOS/InstallVulkan --root "$HOME/VulkanSdk" --accept-licenses --default-answer --confirm-command install

        echo "VULKAN_SDK=$HOME/VulkanSdk/macOS" >> "$GITHUB_ENV"
        echo "VK_ICD_FILENAMES=$HOME/VulkanSdk/macOS/share/vulkan/icd.d/MoltenVK_icd.json" >> "$GITHUB_ENV"
        echo "VK_LAYER_PATH=$HOME/VulkanSdk/macOS/share/vulkan/explicit_layer.d" >> "$GITHUB_ENV"
        echo "DYLD_FALLBACK_LIBRARY_PATH=$HOME/VulkanSdk/macOS/lib" >>"$GITHUB_ENV"
    
    - name: Build
      shell: bash
      run: set -e && cargo build --verbose --all-targets --all-features
      
    - name: Clippy
      shell: bash
      run: set -e && RUSTFLAGS="-Dwarnings" cargo clippy --verbose --all-targets --all-features
      
    - name: Clippy(no features)
      shell: bash
      run: set -e && RUSTFLAGS="-Dwarnings" cargo clippy --verbose --all-targets --no-default-features
      
    - name: Run tests
      shell: bash
      if: ${{ matrix.run-tests }}
      run: |
        set -e
        # Skip backends
        if [ ${{ matrix.os != 'ubuntu-latest' }} ]; then
          export SUPASIM_SKIP_BACKEND_VULKAN=1
          export SUPASIM_SKIP_BACKEND_WGPU_VULKAN=1
        fi
        #if [ ${{ matrix.os != 'windows-latest' }} ]; then
          #export SUPASIM_SKIP_BACKEND_WGPU_DX12=1
        #fi

        # Skip kernel targets
        export SUPASIM_SKIP_KERNELS_PTX=1
        if [ ${{ matrix.os == 'macos-latest' }} ]; then
          export SUPASIM_SKIP_KERNELS_DXIL=1
        fi

        echo -e "Running all tests\n"
        SUPASIM_LOG_FULL_TRACE=1 cargo test --verbose --all-targets --all-features -- --nocapture
        echo -e "\nRunning tests with no features\n"
        SUPASIM_LOG_FULL_TRACE=1 cargo test --verbose --all-targets --no-default-features -- --nocapture

    - name: Run examples
      shell: bash
      if: ${{ matrix.run-tests }}
      run: |
        SUPASIM_LOG_FULL_TRACE=1 cargo run --example hal_buffer_copy --verbose --all-features